#! /usr/bin/env python
# encoding: utf-8
import os
import subprocess
import shutil
import tarfile
import tempfile

APPNAME = "machine"
VERSION = "0.2"

top = "."
out = "../env"


def configure(ctx):
    print("â†’ configuring the project in " + ctx.path.abspath())


def venv(cmd):
    return "(source bin/activate && DYLD_LIBRARY_PATH=$VIRTUAL_ENV %s)" % cmd


def venvcall(srcscript):
    srcscript = [
        "#!/bin/bash"
        "set -eu",
        "source %s" % os.path.join(out, "bin", "activate"),
        "export DYLD_LIBRARY_PATH=$VIRTUAL_ENV",
        srcscript,
        "deactivate"]

    f = tempfile.NamedTemporaryFile(delete=False)
    f.write("\n".join(srcscript))
    f.close()

    p = subprocess.Popen("bash %s" % f.name, shell=True,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    stdout, stderr = p.communicate()
    os.unlink(f.name)
    print stderr
    return stdout


def venvexec(srcscript):
    venvcall(srcscript)


def build_module(module, configure="", numthreads=4):
    script = """
        base="%(module)s"
        pushd 3rdparty
        rm -fr "$base"
        tar xzf "$base.tar.gz"
        pushd "$base"
        ./configure --prefix=$VIRTUAL_ENV %(configure)s
        make -j%(numthreads)d
        make install
        popd
        rm -fr "$base"
        popd
    """ % locals()
    return lambda target: venvexec(script)


def build_gfortran(target):
    binpath = os.path.join(out, "bin")
    manpath = os.path.join(out, "share", "man", "man1")
    includepath = os.path.join(out, "include")

    binfiles = os.listdir(binpath)
    manfiles = os.listdir(manpath)

    venvexec("""
        base="gcc-42-5666.3-darwin11"
        pushd 3rdparty
        rm -fr "$base"
        mkdir -p "$base"
        pushd "$base"
        xar -xf "../$base.pkg"
        mv *.pkg/Payload Payload.gz
        pax --insecure -rz -f Payload.gz -s ",./usr,$VIRTUAL_ENV,"
        ln -sf "$VIRTUAL_ENV/bin/gfortran-4.2" "$VIRTUAL_ENV/bin/gfortran"
        popd
        rm -fr "$base"
        popd
    """ % locals())

    # Delete other files installed
    shutil.rmtree(os.path.join(includepath, "gcc"))

    for f in os.listdir(binpath):
        if f not in binfiles and not "gfortran" in f:
            os.unlink(os.path.join(binpath, f))

    for f in os.listdir(manpath):
        if f not in manfiles and not "gfortran" in f:
            os.unlink(os.path.join(binpath, f))


def build_mathjax(target):
    cmd = "from IPython.frontend.html import notebook; print notebook.__file__"
    nbfile = venvcall("echo \"%s\" | python" % cmd)
    static = os.path.join(os.path.dirname(nbfile), "static")
    tarpath = os.path.join("3rdparty", "mathjax-1.1.0.tar.gz")
    tar = tarfile.open(name=tarpath, mode="r:gz")
    topdir = tar.firstmember.path
    tar.extractall(static)
    os.system("mv -f %s %s" % (
        os.path.join(static, topdir),
        os.path.join(static, "mathjax")))
    os.system("touch ../env/.mathjax-done")


def build(ctx):
    ctx(rule="virtualenv --distribute .", target="bin/activate")

    ctx(rule=build_module("pkg-config-0.26"),
        source="bin/activate", target="bin/pkg-config")

    ctx(rule=build_module("libpng-1.5.13"),
        source="bin/pkg-config", target="bin/libpng-config")

    ctx(rule=build_module("freetype-2.1.10"),
        source="bin/pkg-config", target="bin/freetype-config")

    ctx(rule=build_module("zeromq-3.2.2"),
        source="bin/pkg-config", target="lib/libzmq.dylib")

    qt_configure_flags = ("-opensource -fast -no-qt3support -no-phonon "
        "-no-declarative -no-openssl -no-cups -no-iconv -no-dbus "
        "-no-nis --confirm-license=yes")

    ctx(rule=build_module("qt-everywhere-opensource-src-4.8.4", qt_configure_flags, 1),
        source="bin/pkg-config", target="bin/qmake")

    ctx(rule=build_gfortran, source="bin/pkg-config", target="bin/gfortran")

    ctx(rule=venv("easy_install readline==6.2.4.1 && easy_install ipython==0.13.1"),
        source="bin/pkg-config", target="bin/ipython")

    # Install numpy separately, due to bug in scipy install script.
    site_packages = os.path.join("lib", "python2.7", "site-packages")
    numpy = os.path.join(site_packages, "numpy", "__init__.py")
    ctx(rule=venv("pip install numpy==1.6.2"), source="bin/pkg-config", target=numpy)

    ctx(rule=venv("pip install -r ../src/requirements.txt && touch ${TGT}"),
        source=[
            numpy,
            "bin/gfortran",
            "bin/freetype-config",
            "bin/libpng-config",
            "bin/qmake",
            "lib/libzmq.dylib"],
        target=".requirements-done")
    ctx.add_manual_dependency(".requirements-done", ctx.path.find_resource("requirements.txt"))
    ctx(rule=build_mathjax, source=".requirements-done", target=".mathjax-done")
